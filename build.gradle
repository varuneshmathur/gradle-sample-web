def langs = ['java', 'groovy']
langs.each {
    apply plugin : it
}
apply plugin : 'war'
apply plugin : 'idea'
apply plugin : 'gretty'

group = 'org.mikeneck.web.sample'
version = '1.0.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7
httpPort = 3000

def encoding = {it.encoding = 'UTF-8'}

repositories {
    mavenCentral ()
}

dependencies {
    compile 'org.apache.geronimo.specs:geronimo-servlet_2.5_spec:1.2'
    groovy  'org.codehaus.groovy:groovy:1.8.6'
    testCompile ('junit:junit-dep:4.10') {
        exclude module : 'org.hamcrest:hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.2.1'
}

def structure = {
    def dir = []
    sourceSets.each { src ->
        langs.each { lang ->
            dir << "src/${src.name}/${lang}/${project.properties.group.replace('.', '/')}"
        }
        dir << "src/${src.name}/resources"
    }
    dir << "${project.properties.webAppDirName}/WEB-INF"
    dir.each {
        if (new File(it).exists() == false) {
            ant.echo it
            ant.mkdir dir : it
        }
    }
}

def webDescriptor = {
    def descriptor = "${project.properties.webAppDirName}/WEB-INF/web.xml"
    def file = new File(descriptor)
    if (file.exists() == false) {
        def writer = new StringWriter()
        def javaEE = 'http://java.sun.com/xml/ns/javaee'
        writer << $/<?xml version="1.0" encoding="UTF-8"?>
/$
        def xml = new groovy.xml.MarkupBuilder(writer)
        xml.'web-app' ('xmlns:xsi' : 'http://www.w3.org/2001/XMLSchema-instance',
            xmlns : javaEE,
            'xmlns:web' : "$javaEE/web-app_2_5.xsd",
            'xsi:schemaLocation' : 'http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaeeweb-app_2_5.xsd',
            id : 'sample_web', version : '2.5', $/
/$)
        ant.echo "writing file : ${file.getName()}"
        file.write(writer.toString(), 'UTF-8')
    }
}

tasks.ideaModule {
    doFirst structure
    doFirst webDescriptor
}

tasks.withType (AbstractCompile).each {
    encoding it.options
}

task gitignore << {
    def pName = project.properties.group.tokenize('.')[0]
    def extra = "!src/*/*/$pName\n"
    ant.echo ('preparing .gitignore file')
    def gitignoreFile = $/
# for java
*.class

# Package Files #
*.jar
*.war
*.ear

# for idea
*.iml
*.ipr
*.iws
.idea/
out/

# for gradle
.gradle
target/
build/

# for git
.gitignore

# for project
/$
    def contents = "${gitignoreFile}${pName}/\n${extra}"
    new File('.gitignore').write(contents, 'UTF-8')
}

task customTask << { println 'do something' }
customTask {println 'load task'}
customTask << {println 'do task'}
customTask.doFirst {println 'do first'}
customTask.doFirst {println 'do more first'}
customTask.doLast {println 'do last'}
customTask << {println 'do lastly'}

task showPath << {
    project.configurations.each {
        println it.name
        println it.asPath
    }
}
